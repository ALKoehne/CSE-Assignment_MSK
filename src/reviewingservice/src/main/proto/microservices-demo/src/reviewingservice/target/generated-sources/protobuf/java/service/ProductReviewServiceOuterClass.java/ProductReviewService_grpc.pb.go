// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: ProductReviewService.proto

// ----------------- Produktbewertungs-Service -----------------

package ProductReviewServiceOuterClass_java

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductReviewService_AddReview_FullMethodName        = "/service.ProductReviewService/AddReview"
	ProductReviewService_GetReviews_FullMethodName       = "/service.ProductReviewService/GetReviews"
	ProductReviewService_GetAverageRating_FullMethodName = "/service.ProductReviewService/GetAverageRating"
)

// ProductReviewServiceClient is the client API for ProductReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductReviewServiceClient interface {
	// Bewertet ein Produkt hinzufügen
	AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error)
	// Holt alle Bewertungen für ein Produkt
	GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error)
	// Berechnet das durchschnittliche Rating für ein Produkt
	GetAverageRating(ctx context.Context, in *GetAverageRatingRequest, opts ...grpc.CallOption) (*GetAverageRatingResponse, error)
}

type productReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductReviewServiceClient(cc grpc.ClientConnInterface) ProductReviewServiceClient {
	return &productReviewServiceClient{cc}
}

func (c *productReviewServiceClient) AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReviewResponse)
	err := c.cc.Invoke(ctx, ProductReviewService_AddReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReviewServiceClient) GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReviewsResponse)
	err := c.cc.Invoke(ctx, ProductReviewService_GetReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReviewServiceClient) GetAverageRating(ctx context.Context, in *GetAverageRatingRequest, opts ...grpc.CallOption) (*GetAverageRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAverageRatingResponse)
	err := c.cc.Invoke(ctx, ProductReviewService_GetAverageRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductReviewServiceServer is the server API for ProductReviewService service.
// All implementations must embed UnimplementedProductReviewServiceServer
// for forward compatibility.
type ProductReviewServiceServer interface {
	// Bewertet ein Produkt hinzufügen
	AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error)
	// Holt alle Bewertungen für ein Produkt
	GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error)
	// Berechnet das durchschnittliche Rating für ein Produkt
	GetAverageRating(context.Context, *GetAverageRatingRequest) (*GetAverageRatingResponse, error)
	mustEmbedUnimplementedProductReviewServiceServer()
}

// UnimplementedProductReviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductReviewServiceServer struct{}

func (UnimplementedProductReviewServiceServer) AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReview not implemented")
}
func (UnimplementedProductReviewServiceServer) GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedProductReviewServiceServer) GetAverageRating(context.Context, *GetAverageRatingRequest) (*GetAverageRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageRating not implemented")
}
func (UnimplementedProductReviewServiceServer) mustEmbedUnimplementedProductReviewServiceServer() {}
func (UnimplementedProductReviewServiceServer) testEmbeddedByValue()                              {}

// UnsafeProductReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductReviewServiceServer will
// result in compilation errors.
type UnsafeProductReviewServiceServer interface {
	mustEmbedUnimplementedProductReviewServiceServer()
}

func RegisterProductReviewServiceServer(s grpc.ServiceRegistrar, srv ProductReviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductReviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductReviewService_ServiceDesc, srv)
}

func _ProductReviewService_AddReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).AddReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_AddReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).AddReview(ctx, req.(*AddReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReviewService_GetReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).GetReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_GetReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).GetReviews(ctx, req.(*GetReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReviewService_GetAverageRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).GetAverageRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_GetAverageRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).GetAverageRating(ctx, req.(*GetAverageRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductReviewService_ServiceDesc is the grpc.ServiceDesc for ProductReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ProductReviewService",
	HandlerType: (*ProductReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReview",
			Handler:    _ProductReviewService_AddReview_Handler,
		},
		{
			MethodName: "GetReviews",
			Handler:    _ProductReviewService_GetReviews_Handler,
		},
		{
			MethodName: "GetAverageRating",
			Handler:    _ProductReviewService_GetAverageRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProductReviewService.proto",
}
